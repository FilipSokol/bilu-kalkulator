{"version":3,"sources":["components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","useState","ValueB","setValueB","className","classname","placeholder","onChange","e","target","value","Math","round","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAmCeA,EA3BI,WACjB,MAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEA,OACE,sBAAKC,UAAU,YAAf,UACE,8DADF,+BAGE,mBAAGC,UAAU,WAAb,iNAKA,4EACA,uBAAOC,YAAY,IAAIC,SAAU,SAACC,GAAD,OAAOL,EAAUK,EAAEC,OAAOC,UAC3D,yCACA,sCACQR,EADR,iBAC8BA,EAD9B,WAGA,mCAAqB,MAAd,EAAIA,GAA6B,GAATA,KAC/B,4CACA,4BAAIS,KAAKC,MAA+C,KAAzB,MAAd,EAAIV,GAA6B,GAATA,MACzC,4EACA,4BAAIS,KAAKC,MAA+C,KAAzB,MAAd,EAAIV,GAA6B,GAATA,UClBhCW,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,OCKSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bbe840f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n// const convertValue = (valueB) => {\n//   if (valueB === \"\") {\n//     return (valueB = \"\");\n//   }\n// };\n\nconst Calculator = () => {\n  const [ValueB, setValueB] = useState(0);\n\n  return (\n    <div className=\"container\">\n      <h2>KALKULATORÓWKA-BILÓWKA</h2>\n      Jeśli masz zadanie typu\n      <p classname=\"longtext\">\n        \"Przy prawdopodobieństwie braku strony równym 0.0001 oraz szybkości\n        dostępu do pamięci i dysku równym 10 ns i 10 ms średni czas dostępu\n        dopamięci wynosi:\"\n      </p>\n      <p>Podaj prawdopodobieństwo braku strony:</p>\n      <input placeholder=\"0\" onChange={(e) => setValueB(e.target.value)} />\n      <p>Wzór:</p>\n      <p>\n        (1 - {ValueB}) * 0.00001 + {ValueB} * 10\n      </p>\n      <p>= {(1 - ValueB) * 0.00001 + ValueB * 10}</p>\n      <p>Wynik w ns:</p>\n      <p>{Math.round(((1 - ValueB) * 0.00001 + ValueB * 10) * 1000000)}</p>\n      <p>Jak nie ma tego wyniku to szukaj w μs:</p>\n      <p>{Math.round(((1 - ValueB) * 0.00001 + ValueB * 10) * 1000)}</p>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import \"./App.css\";\n\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}